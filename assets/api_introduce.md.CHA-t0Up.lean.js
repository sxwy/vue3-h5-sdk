import{_ as a,c as t,a2 as i,o as e}from"./chunks/framework.Bg78EKzk.js";const c=JSON.parse('{"title":"介绍","description":"","frontmatter":{},"headers":[],"relativePath":"api/introduce.md","filePath":"api/introduce.md","lastUpdated":1726068653000}'),n={name:"api/introduce.md"};function h(l,s,p,r,d,k){return e(),t("div",null,s[0]||(s[0]=[i(`<h1 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h1><p><code>SDK </code> 中提供了几套对应的 <code>API</code> 请求域名，大家可直接导出使用，无需重复定义</p><ul><li>支持请求增加对应 <code>token</code></li><li>支持无痛刷新 <code>token</code></li><li>支持各个业务的返回结构体</li></ul><blockquote><p>对应的环境就是<a href="./../guide/easy-start.html">快速上手</a>章节初始化时传递给 <code>SDK</code> 的 <code>ENV</code> 参数，<code>SDK</code> 会根据环境自动切换 <code>baseUrl</code></p></blockquote><h2 id="baseapi" tabindex="-1">baseApi <a class="header-anchor" href="#baseapi" aria-label="Permalink to &quot;baseApi&quot;">​</a></h2><table tabindex="0"><thead><tr><th>mock</th><th>test</th><th>rc</th><th>prod</th></tr></thead><tbody><tr><td><code>http://localhost:\${h5SDKConfig.mockerPort}/base</code></td><td><a href="http://test-api.xxx.cn" target="_blank" rel="noreferrer">http://test-api.xxx.cn</a></td><td><a href="https://rc-api.xxx.cn" target="_blank" rel="noreferrer">https://rc-api.xxx.cn</a></td><td><a href="https://api.xxx.cn" target="_blank" rel="noreferrer">https://api.xxx.cn</a></td></tr></tbody></table><h2 id="wxapi" tabindex="-1">wxApi <a class="header-anchor" href="#wxapi" aria-label="Permalink to &quot;wxApi&quot;">​</a></h2><table tabindex="0"><thead><tr><th>mock</th><th>test</th><th>rc</th><th>prod</th></tr></thead><tbody><tr><td><code>http://localhost:\${h5SDKConfig.mockerPort}/wx</code></td><td><a href="https://test-wx.xxx.cn" target="_blank" rel="noreferrer">https://test-wx.xxx.cn</a></td><td><a href="https://rc-wx.xxx.cn" target="_blank" rel="noreferrer">https://rc-wx.xxx.cn</a></td><td><a href="https://wx.xxx.cn" target="_blank" rel="noreferrer">https://wx.xxx.cn</a></td></tr></tbody></table><h2 id="使用示例" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例" aria-label="Permalink to &quot;使用示例&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>所有的 <code>API</code> 都是基于 <code>axios</code> 封装的，对应的使用方法也可参照 <code>axios</code> 官网</p></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { baseApi } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@sxwy/h5-sdk&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getUserInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baseApi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;{</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    token</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }&gt;({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;POST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/getUserInfo/v1.0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,11)]))}const E=a(n,[["render",h]]);export{c as __pageData,E as default};
